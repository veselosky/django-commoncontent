# Generated by Django 5.0.7 on 2024-08-12 21:40

import commoncontent.common
import django.db.models.deletion
import django.utils.timezone
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("sites", "0002_alter_domain_unique"),
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ArticleSeries",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                ("slug", models.SlugField(verbose_name="slug")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="e.g. 'Dr. Samuel Clemens, Phd.'",
                        max_length=255,
                        verbose_name="author name, as displayed",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="e.g. 'samuel-clemens'", verbose_name="slug"
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="A brief description of the author, used for SEO description.",
                        max_length=255,
                        verbose_name="description (text only, no markup)",
                    ),
                ),
                (
                    "short_bio",
                    models.TextField(
                        blank=True,
                        help_text="A brief biography of the author, one paragraph. May contain HTML.",
                        verbose_name="short biography",
                    ),
                ),
                (
                    "full_bio",
                    models.TextField(
                        blank=True,
                        help_text="A full biography of the author, main content for the profile page. May contain HTML.",
                        verbose_name="full biography",
                    ),
                ),
                (
                    "copyright_holder",
                    models.CharField(
                        blank=True,
                        help_text="Name of copyright holder for this author.",
                        max_length=255,
                        verbose_name="copyright holder",
                    ),
                ),
                (
                    "copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Time of last significant editorial update",
                        null=True,
                        verbose_name="date modified",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
            ],
            options={
                "verbose_name": "author",
                "verbose_name_plural": "authors",
            },
        ),
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("withheld", "Draft (withheld)"),
                            ("usable", "Publish (usable)"),
                            ("cancelled", "Unpublish (cancelled)"),
                        ],
                        default="usable",
                        help_text='Must be "usable" to appear on the site. See <a href="https://schema.org/creativeWorkStatus">Schema.org</a> for details.',
                        max_length=50,
                        verbose_name="status",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the work was originally created.",
                        null=True,
                        verbose_name="date created",
                    ),
                ),
                (
                    "date_published",
                    models.DateTimeField(
                        blank=True,
                        help_text="Must be non-blank and in the past for page to be 'live'",
                        null=True,
                        verbose_name="date published",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Time of last significant editorial update",
                        null=True,
                        verbose_name="date modified",
                    ),
                ),
                (
                    "expires",
                    models.DateTimeField(
                        blank=True,
                        help_text="Must be blank or in the future for page to be 'live'",
                        null=True,
                        verbose_name="expiration date",
                    ),
                ),
                (
                    "custom_copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "custom_copyright_holder",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="custom copyright holder",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en_US", max_length=10, verbose_name="locale"
                    ),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=255, verbose_name="title"),
                ),
                (
                    "mime_type",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=255,
                        verbose_name="MIME type",
                    ),
                ),
                (
                    "upload_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="when uploaded"
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        max_length=255,
                        upload_to=commoncontent.common.upload_to,
                        verbose_name="file",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who created/uploaded the content (for internal permissions, audits).",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="commoncontent.author",
                        verbose_name="author",
                    ),
                ),
            ],
            options={
                "verbose_name": "attachment",
                "verbose_name_plural": "attachments",
                "abstract": False,
                "unique_together": {("site", "title")},
            },
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("withheld", "Draft (withheld)"),
                            ("usable", "Publish (usable)"),
                            ("cancelled", "Unpublish (cancelled)"),
                        ],
                        default="usable",
                        help_text='Must be "usable" to appear on the site. See <a href="https://schema.org/creativeWorkStatus">Schema.org</a> for details.',
                        max_length=50,
                        verbose_name="status",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the work was originally created.",
                        null=True,
                        verbose_name="date created",
                    ),
                ),
                (
                    "date_published",
                    models.DateTimeField(
                        blank=True,
                        help_text="Must be non-blank and in the past for page to be 'live'",
                        null=True,
                        verbose_name="date published",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Time of last significant editorial update",
                        null=True,
                        verbose_name="date modified",
                    ),
                ),
                (
                    "expires",
                    models.DateTimeField(
                        blank=True,
                        help_text="Must be blank or in the future for page to be 'live'",
                        null=True,
                        verbose_name="expiration date",
                    ),
                ),
                (
                    "custom_copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "custom_copyright_holder",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="custom copyright holder",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en_US", max_length=10, verbose_name="locale"
                    ),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=255, verbose_name="title"),
                ),
                (
                    "mime_type",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=255,
                        verbose_name="MIME type",
                    ),
                ),
                (
                    "upload_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="when uploaded"
                    ),
                ),
                (
                    "image_file",
                    models.ImageField(
                        blank=True,
                        height_field="height",
                        null=True,
                        upload_to=commoncontent.common.upload_to,
                        verbose_name="image file",
                        width_field="width",
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="alt text"
                    ),
                ),
                (
                    "width",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="width"
                    ),
                ),
                (
                    "height",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="height"
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="commoncontent.author",
                        verbose_name="author",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who created/uploaded the content (for internal permissions, audits).",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "image",
                "verbose_name_plural": "images",
                "abstract": False,
                "unique_together": {("site", "title")},
            },
        ),
        migrations.AddField(
            model_name="author",
            name="profile_image",
            field=models.ForeignKey(
                blank=True,
                help_text="Image for social sharing",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="commoncontent.image",
            ),
        ),
        migrations.CreateModel(
            name="Menu",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "admin_name",
                    models.CharField(max_length=255, verbose_name="admin name"),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="Slug 'main-nav' will automatically be included in generic headers.",
                        verbose_name="slug",
                    ),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=255, verbose_name="title"),
                ),
                (
                    "site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
            ],
            options={
                "unique_together": {("site", "slug")},
            },
        ),
        migrations.AddField(
            model_name="author",
            name="social_links",
            field=models.ForeignKey(
                blank=True,
                help_text="A list of links to the author's websites and/or social media profiles.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="commoncontent.menu",
                verbose_name="social links",
            ),
        ),
        migrations.CreateModel(
            name="Page",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("withheld", "Draft (withheld)"),
                            ("usable", "Publish (usable)"),
                            ("cancelled", "Unpublish (cancelled)"),
                        ],
                        default="usable",
                        help_text='Must be "usable" to appear on the site. See <a href="https://schema.org/creativeWorkStatus">Schema.org</a> for details.',
                        max_length=50,
                        verbose_name="status",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the work was originally created.",
                        null=True,
                        verbose_name="date created",
                    ),
                ),
                (
                    "date_published",
                    models.DateTimeField(
                        blank=True,
                        help_text="Must be non-blank and in the past for page to be 'live'",
                        null=True,
                        verbose_name="date published",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Time of last significant editorial update",
                        null=True,
                        verbose_name="date modified",
                    ),
                ),
                (
                    "expires",
                    models.DateTimeField(
                        blank=True,
                        help_text="Must be blank or in the future for page to be 'live'",
                        null=True,
                        verbose_name="expiration date",
                    ),
                ),
                (
                    "custom_copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "custom_copyright_holder",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="custom copyright holder",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en_US", max_length=10, verbose_name="locale"
                    ),
                ),
                ("slug", models.SlugField(verbose_name="slug")),
                ("body", models.TextField(blank=True, verbose_name="body content")),
                (
                    "custom_icon",
                    models.CharField(
                        blank=True,
                        help_text="<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>",
                        max_length=50,
                        verbose_name="custom icon",
                    ),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="SEO title override"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="SEO description override",
                    ),
                ),
                (
                    "base_template",
                    models.CharField(
                        blank=True,
                        help_text="Replaces the standard base.html root layout. This allows you to have a totally custom layout for a page.",
                        max_length=255,
                        verbose_name="base template",
                    ),
                ),
                (
                    "content_template",
                    models.CharField(
                        blank=True,
                        help_text="The template that renders the content body within the page layout provided by the base.html. This only affects the 'main' section of the page, the rest of the layout is inherited from base.html.",
                        max_length=255,
                        verbose_name="content body template",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="commoncontent.author",
                        verbose_name="author",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who created/uploaded the content (for internal permissions, audits).",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "share_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image for social sharing",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="commoncontent.image",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "page",
                "verbose_name_plural": "pages",
                "ordering": ["-date_published"],
                "get_latest_by": "date_published",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Section",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("withheld", "Draft (withheld)"),
                            ("usable", "Publish (usable)"),
                            ("cancelled", "Unpublish (cancelled)"),
                        ],
                        default="usable",
                        help_text='Must be "usable" to appear on the site. See <a href="https://schema.org/creativeWorkStatus">Schema.org</a> for details.',
                        max_length=50,
                        verbose_name="status",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the work was originally created.",
                        null=True,
                        verbose_name="date created",
                    ),
                ),
                (
                    "date_published",
                    models.DateTimeField(
                        blank=True,
                        help_text="Must be non-blank and in the past for page to be 'live'",
                        null=True,
                        verbose_name="date published",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Time of last significant editorial update",
                        null=True,
                        verbose_name="date modified",
                    ),
                ),
                (
                    "expires",
                    models.DateTimeField(
                        blank=True,
                        help_text="Must be blank or in the future for page to be 'live'",
                        null=True,
                        verbose_name="expiration date",
                    ),
                ),
                (
                    "custom_copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "custom_copyright_holder",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="custom copyright holder",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en_US", max_length=10, verbose_name="locale"
                    ),
                ),
                ("slug", models.SlugField(verbose_name="slug")),
                ("body", models.TextField(blank=True, verbose_name="body content")),
                (
                    "custom_icon",
                    models.CharField(
                        blank=True,
                        help_text="<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>",
                        max_length=50,
                        verbose_name="custom icon",
                    ),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="SEO title override"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="SEO description override",
                    ),
                ),
                (
                    "base_template",
                    models.CharField(
                        blank=True,
                        help_text="Replaces the standard base.html root layout. This allows you to have a totally custom layout for a page.",
                        max_length=255,
                        verbose_name="base template",
                    ),
                ),
                (
                    "content_template",
                    models.CharField(
                        blank=True,
                        help_text="The template that renders the content body within the page layout provided by the base.html. This only affects the 'main' section of the page, the rest of the layout is inherited from base.html.",
                        max_length=255,
                        verbose_name="content body template",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="commoncontent.author",
                        verbose_name="author",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who created/uploaded the content (for internal permissions, audits).",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "share_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image for social sharing",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="commoncontent.image",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "section",
                "verbose_name_plural": "sections",
                "ordering": ["-date_published"],
                "get_latest_by": "date_published",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("withheld", "Draft (withheld)"),
                            ("usable", "Publish (usable)"),
                            ("cancelled", "Unpublish (cancelled)"),
                        ],
                        default="usable",
                        help_text='Must be "usable" to appear on the site. See <a href="https://schema.org/creativeWorkStatus">Schema.org</a> for details.',
                        max_length=50,
                        verbose_name="status",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the work was originally created.",
                        null=True,
                        verbose_name="date created",
                    ),
                ),
                (
                    "date_published",
                    models.DateTimeField(
                        blank=True,
                        help_text="Must be non-blank and in the past for page to be 'live'",
                        null=True,
                        verbose_name="date published",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Time of last significant editorial update",
                        null=True,
                        verbose_name="date modified",
                    ),
                ),
                (
                    "expires",
                    models.DateTimeField(
                        blank=True,
                        help_text="Must be blank or in the future for page to be 'live'",
                        null=True,
                        verbose_name="expiration date",
                    ),
                ),
                (
                    "custom_copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "custom_copyright_holder",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="custom copyright holder",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en_US", max_length=10, verbose_name="locale"
                    ),
                ),
                ("slug", models.SlugField(verbose_name="slug")),
                ("body", models.TextField(blank=True, verbose_name="body content")),
                (
                    "custom_icon",
                    models.CharField(
                        blank=True,
                        help_text="<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>",
                        max_length=50,
                        verbose_name="custom icon",
                    ),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="SEO title override"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="SEO description override",
                    ),
                ),
                (
                    "base_template",
                    models.CharField(
                        blank=True,
                        help_text="Replaces the standard base.html root layout. This allows you to have a totally custom layout for a page.",
                        max_length=255,
                        verbose_name="base template",
                    ),
                ),
                (
                    "content_template",
                    models.CharField(
                        blank=True,
                        help_text="The template that renders the content body within the page layout provided by the base.html. This only affects the 'main' section of the page, the rest of the layout is inherited from base.html.",
                        max_length=255,
                        verbose_name="content body template",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who created/uploaded the content (for internal permissions, audits).",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "series",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="commoncontent.articleseries",
                        verbose_name="series",
                    ),
                ),
                (
                    "attachment_set",
                    models.ManyToManyField(
                        to="commoncontent.attachment", verbose_name="attachments"
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="commoncontent.author",
                        verbose_name="author",
                    ),
                ),
                (
                    "image_set",
                    models.ManyToManyField(
                        to="commoncontent.image", verbose_name="related images"
                    ),
                ),
                (
                    "share_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image for social sharing",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="commoncontent.image",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="commoncontent.section",
                        verbose_name="section",
                    ),
                ),
            ],
            options={
                "verbose_name": "article",
                "verbose_name_plural": "articles",
                "get_latest_by": "date_published",
                "order_with_respect_to": "series",
            },
        ),
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("withheld", "Draft (withheld)"),
                            ("usable", "Publish (usable)"),
                            ("cancelled", "Unpublish (cancelled)"),
                        ],
                        default="usable",
                        help_text='Must be "usable" to appear on the site. See <a href="https://schema.org/creativeWorkStatus">Schema.org</a> for details.',
                        max_length=50,
                        verbose_name="status",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "date_created",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the work was originally created.",
                        null=True,
                        verbose_name="date created",
                    ),
                ),
                (
                    "date_published",
                    models.DateTimeField(
                        blank=True,
                        help_text="Must be non-blank and in the past for page to be 'live'",
                        null=True,
                        verbose_name="date published",
                    ),
                ),
                (
                    "date_modified",
                    models.DateTimeField(
                        blank=True,
                        help_text="Time of last significant editorial update",
                        null=True,
                        verbose_name="date modified",
                    ),
                ),
                (
                    "expires",
                    models.DateTimeField(
                        blank=True,
                        help_text="Must be blank or in the future for page to be 'live'",
                        null=True,
                        verbose_name="expiration date",
                    ),
                ),
                (
                    "custom_copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "custom_copyright_holder",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="custom copyright holder",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en_US", max_length=10, verbose_name="locale"
                    ),
                ),
                ("slug", models.SlugField(verbose_name="slug")),
                ("body", models.TextField(blank=True, verbose_name="body content")),
                (
                    "custom_icon",
                    models.CharField(
                        blank=True,
                        help_text="<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>",
                        max_length=50,
                        verbose_name="custom icon",
                    ),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="SEO title override"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="SEO description override",
                    ),
                ),
                (
                    "base_template",
                    models.CharField(
                        blank=True,
                        help_text="Replaces the standard base.html root layout. This allows you to have a totally custom layout for a page.",
                        max_length=255,
                        verbose_name="base template",
                    ),
                ),
                (
                    "content_template",
                    models.CharField(
                        blank=True,
                        help_text="The template that renders the content body within the page layout provided by the base.html. This only affects the 'main' section of the page, the rest of the layout is inherited from base.html.",
                        max_length=255,
                        verbose_name="content body template",
                    ),
                ),
                (
                    "admin_name",
                    models.CharField(
                        help_text="Name used in the admin to distinguish from other home pages",
                        max_length=255,
                        unique=True,
                        verbose_name="admin name",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="commoncontent.author",
                        verbose_name="author",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who created/uploaded the content (for internal permissions, audits).",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "share_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image for social sharing",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="commoncontent.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "home page",
                "verbose_name_plural": "home pages",
                "ordering": ["-date_published"],
                "get_latest_by": "date_published",
                "abstract": False,
                "indexes": [
                    models.Index(
                        fields=["site", "status", "date_published", "expires", "slug"],
                        name="commonconte_site_id_5f35cf_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Link",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "url",
                    models.CharField(
                        help_text="This can be either an absolute path or a full URL starting with a scheme such as “https://”.",
                        max_length=255,
                        verbose_name="URL",
                    ),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=255, verbose_name="title"),
                ),
                (
                    "custom_icon",
                    models.CharField(
                        blank=True,
                        help_text="<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>",
                        max_length=50,
                        verbose_name="custom icon",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "share_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image for social sharing",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="commoncontent.image",
                    ),
                ),
                (
                    "menu",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="commoncontent.menu",
                        verbose_name="menu",
                    ),
                ),
            ],
            options={
                "unique_together": {("menu", "title"), ("menu", "url")},
            },
        ),
        migrations.AddConstraint(
            model_name="author",
            constraint=models.UniqueConstraint(
                fields=("site", "name"), name="unique_author_name_per_site"
            ),
        ),
        migrations.AddIndex(
            model_name="page",
            index=models.Index(
                fields=["site", "status", "date_published", "expires", "slug"],
                name="commonconte_site_id_4791cc_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="page",
            unique_together={("site", "slug")},
        ),
        migrations.AddIndex(
            model_name="section",
            index=models.Index(
                fields=["site", "status", "date_published", "expires", "slug"],
                name="commonconte_site_id_6bcc49_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="section",
            constraint=models.UniqueConstraint(
                fields=("site", "slug"), name="unique_section_slug_per_site"
            ),
        ),
        migrations.AddIndex(
            model_name="article",
            index=models.Index(
                fields=[
                    "site",
                    "status",
                    "date_published",
                    "expires",
                    "section",
                    "slug",
                ],
                name="commonconte_site_id_72f6d3_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="article",
            constraint=models.UniqueConstraint(
                fields=("site", "section", "slug"),
                name="unique_article_slug_per_section",
            ),
        ),
    ]
