# Generated by Django 4.1.4 on 2023-02-01 12:27

import django.db.models.deletion

# import easy_thumbnails.fields
import taggit.managers

# import tinymce.models
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("sites", "0002_alter_domain_unique"),
        ("taggit", "0005_auto_20220424_2025"),
    ]

    operations = [
        migrations.CreateModel(
            name="Image",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=255, unique=True, verbose_name="title"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="description"
                    ),
                ),
                (
                    "image_file",
                    models.ImageField(
                        height_field="image_height",
                        max_length=255,
                        upload_to="",
                        verbose_name="image file",
                        width_field="image_width",
                    ),
                ),
                (
                    "image_width",
                    models.IntegerField(blank=True, verbose_name="image_width"),
                ),
                (
                    "image_height",
                    models.IntegerField(blank=True, verbose_name="image_height"),
                ),
                (
                    "mime_type",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=255,
                        verbose_name="MIME type",
                    ),
                ),
                (
                    "copyright_holder",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="copyright holder"
                    ),
                ),
                (
                    "custom_copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "uploaded_dt",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="when uploaded"
                    ),
                ),
                (
                    "created_dt",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="when taken"
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="alt text"
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "image",
                "verbose_name_plural": "images",
            },
        ),
        migrations.CreateModel(
            name="Section",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                ("slug", models.SlugField(verbose_name="slug")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("withheld", "Draft (withheld)"),
                            ("usable", "Publish (usable)"),
                            ("cancelled", "Unpublish (cancelled)"),
                        ],
                        db_index=True,
                        default="usable",
                        max_length=50,
                        verbose_name="status",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "base_template",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="base template"
                    ),
                ),
                (
                    "content_template",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="content body template"
                    ),
                ),
                (
                    "body",
                    models.TextField(blank=True, verbose_name="body content"),
                ),
                (
                    "published_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Must be non-blank and in the past for page to be 'live'",
                        null=True,
                        verbose_name="published time",
                    ),
                ),
                (
                    "modified_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Time of last significant editorial update",
                        null=True,
                        verbose_name="modified time",
                    ),
                ),
                (
                    "expiration_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Must be blank or in the future for page to be 'live'",
                        null=True,
                        verbose_name="expiration time",
                    ),
                ),
                (
                    "author_display_name",
                    models.CharField(
                        blank=True,
                        help_text="e.g. 'Dr. Samuel Clemens, Phd.'",
                        max_length=255,
                        verbose_name="author name, as displayed",
                    ),
                ),
                (
                    "author_profile_url",
                    models.URLField(
                        blank=True, max_length=255, verbose_name="author URL"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        default="website",
                        help_text="Open Graph type, see https://ogp.me",
                        max_length=50,
                        verbose_name="opengraph type",
                    ),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="SEO title override"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="SEO description override",
                    ),
                ),
                (
                    "custom_copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "custom_icon",
                    models.CharField(
                        blank=True,
                        help_text="<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>",
                        max_length=50,
                        verbose_name="custom icon",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en_US", max_length=10, verbose_name="locale"
                    ),
                ),
                (
                    "og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image for social sharing",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="genericsite.image",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "section",
                "verbose_name_plural": "sections",
                "ordering": ["-published_time"],
                "get_latest_by": "published_time",
                "abstract": False,
                "unique_together": {("site", "slug")},
            },
        ),
        migrations.CreateModel(
            name="Menu",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "admin_name",
                    models.CharField(max_length=255, verbose_name="admin name"),
                ),
                ("slug", models.SlugField(verbose_name="slug")),
                (
                    "title",
                    models.CharField(blank=True, max_length=255, verbose_name="title"),
                ),
                (
                    "site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
            ],
            options={
                "unique_together": {("site", "slug")},
            },
        ),
        migrations.CreateModel(
            name="HomePage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                ("slug", models.SlugField(verbose_name="slug")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("withheld", "Draft (withheld)"),
                            ("usable", "Publish (usable)"),
                            ("cancelled", "Unpublish (cancelled)"),
                        ],
                        db_index=True,
                        default="usable",
                        max_length=50,
                        verbose_name="status",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "base_template",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="base template"
                    ),
                ),
                (
                    "content_template",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="content body template"
                    ),
                ),
                (
                    "body",
                    models.TextField(blank=True, verbose_name="body content"),
                ),
                (
                    "published_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Must be non-blank and in the past for page to be 'live'",
                        null=True,
                        verbose_name="published time",
                    ),
                ),
                (
                    "modified_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Time of last significant editorial update",
                        null=True,
                        verbose_name="modified time",
                    ),
                ),
                (
                    "expiration_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Must be blank or in the future for page to be 'live'",
                        null=True,
                        verbose_name="expiration time",
                    ),
                ),
                (
                    "author_display_name",
                    models.CharField(
                        blank=True,
                        help_text="e.g. 'Dr. Samuel Clemens, Phd.'",
                        max_length=255,
                        verbose_name="author name, as displayed",
                    ),
                ),
                (
                    "author_profile_url",
                    models.URLField(
                        blank=True, max_length=255, verbose_name="author URL"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        default="website",
                        help_text="Open Graph type, see https://ogp.me",
                        max_length=50,
                        verbose_name="opengraph type",
                    ),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="SEO title override"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="SEO description override",
                    ),
                ),
                (
                    "custom_copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "custom_icon",
                    models.CharField(
                        blank=True,
                        help_text="<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>",
                        max_length=50,
                        verbose_name="custom icon",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en_US", max_length=10, verbose_name="locale"
                    ),
                ),
                (
                    "admin_name",
                    models.CharField(
                        help_text="Name used in the admin to distinguish from other home pages",
                        max_length=255,
                        unique=True,
                        verbose_name="admin name",
                    ),
                ),
                (
                    "og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image for social sharing",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="genericsite.image",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "home page",
                "verbose_name_plural": "home pages",
                "ordering": ["-published_time"],
                "get_latest_by": "published_time",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=255, unique=True, verbose_name="title"),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="description"
                    ),
                ),
                (
                    "image_file",
                    models.ImageField(
                        height_field="image_height",
                        max_length=255,
                        upload_to="",
                        verbose_name="image file",
                        width_field="image_width",
                    ),
                ),
                (
                    "image_width",
                    models.IntegerField(blank=True, verbose_name="image_width"),
                ),
                (
                    "image_height",
                    models.IntegerField(blank=True, verbose_name="image_height"),
                ),
                (
                    "mime_type",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=255,
                        verbose_name="MIME type",
                    ),
                ),
                (
                    "copyright_holder",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="copyright holder"
                    ),
                ),
                (
                    "custom_copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "uploaded_dt",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="when uploaded"
                    ),
                ),
                (
                    "created_dt",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="when taken"
                    ),
                ),
                (
                    "file",
                    models.FileField(max_length=255, upload_to="", verbose_name="file"),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "attachment",
                "verbose_name_plural": "attachments",
            },
        ),
        migrations.CreateModel(
            name="SiteVar",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                ("value", models.TextField(verbose_name="value")),
                (
                    "site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vars",
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
            ],
            options={
                "verbose_name": "sitevar",
                "verbose_name_plural": "sitevars",
                "base_manager_name": "objects",
                "unique_together": {("site", "name")},
            },
        ),
        migrations.CreateModel(
            name="Page",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                ("slug", models.SlugField(verbose_name="slug")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("withheld", "Draft (withheld)"),
                            ("usable", "Publish (usable)"),
                            ("cancelled", "Unpublish (cancelled)"),
                        ],
                        db_index=True,
                        default="usable",
                        max_length=50,
                        verbose_name="status",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "base_template",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="base template"
                    ),
                ),
                (
                    "content_template",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="content body template"
                    ),
                ),
                (
                    "body",
                    models.TextField(blank=True, verbose_name="body content"),
                ),
                (
                    "published_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Must be non-blank and in the past for page to be 'live'",
                        null=True,
                        verbose_name="published time",
                    ),
                ),
                (
                    "modified_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Time of last significant editorial update",
                        null=True,
                        verbose_name="modified time",
                    ),
                ),
                (
                    "expiration_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Must be blank or in the future for page to be 'live'",
                        null=True,
                        verbose_name="expiration time",
                    ),
                ),
                (
                    "author_display_name",
                    models.CharField(
                        blank=True,
                        help_text="e.g. 'Dr. Samuel Clemens, Phd.'",
                        max_length=255,
                        verbose_name="author name, as displayed",
                    ),
                ),
                (
                    "author_profile_url",
                    models.URLField(
                        blank=True, max_length=255, verbose_name="author URL"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        default="website",
                        help_text="Open Graph type, see https://ogp.me",
                        max_length=50,
                        verbose_name="opengraph type",
                    ),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="SEO title override"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="SEO description override",
                    ),
                ),
                (
                    "custom_copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "custom_icon",
                    models.CharField(
                        blank=True,
                        help_text="<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>",
                        max_length=50,
                        verbose_name="custom icon",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en_US", max_length=10, verbose_name="locale"
                    ),
                ),
                (
                    "og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image for social sharing",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="genericsite.image",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "page",
                "verbose_name_plural": "pages",
                "ordering": ["-published_time"],
                "get_latest_by": "published_time",
                "abstract": False,
                "unique_together": {("site", "slug")},
            },
        ),
        migrations.CreateModel(
            name="Link",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "url",
                    models.CharField(
                        help_text="This can be either an absolute path or a full URL starting with a scheme such as “https://”.",
                        max_length=255,
                        verbose_name="URL",
                    ),
                ),
                (
                    "title",
                    models.CharField(blank=True, max_length=255, verbose_name="title"),
                ),
                (
                    "custom_icon",
                    models.CharField(
                        blank=True,
                        help_text="<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>",
                        max_length=50,
                        verbose_name="custom icon",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "menu",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genericsite.menu",
                        verbose_name="menu",
                    ),
                ),
                (
                    "og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image for social sharing",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="genericsite.image",
                    ),
                ),
            ],
            options={
                "unique_together": {("menu", "title"), ("menu", "url")},
            },
        ),
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="title")),
                ("slug", models.SlugField(verbose_name="slug")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("withheld", "Draft (withheld)"),
                            ("usable", "Publish (usable)"),
                            ("cancelled", "Unpublish (cancelled)"),
                        ],
                        db_index=True,
                        default="usable",
                        max_length=50,
                        verbose_name="status",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "base_template",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="base template"
                    ),
                ),
                (
                    "content_template",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="content body template"
                    ),
                ),
                (
                    "body",
                    models.TextField(blank=True, verbose_name="body content"),
                ),
                (
                    "published_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Must be non-blank and in the past for page to be 'live'",
                        null=True,
                        verbose_name="published time",
                    ),
                ),
                (
                    "modified_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Time of last significant editorial update",
                        null=True,
                        verbose_name="modified time",
                    ),
                ),
                (
                    "expiration_time",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Must be blank or in the future for page to be 'live'",
                        null=True,
                        verbose_name="expiration time",
                    ),
                ),
                (
                    "author_display_name",
                    models.CharField(
                        blank=True,
                        help_text="e.g. 'Dr. Samuel Clemens, Phd.'",
                        max_length=255,
                        verbose_name="author name, as displayed",
                    ),
                ),
                (
                    "author_profile_url",
                    models.URLField(
                        blank=True, max_length=255, verbose_name="author URL"
                    ),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="SEO title override"
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="SEO description override",
                    ),
                ),
                (
                    "custom_copyright_notice",
                    models.TextField(
                        blank=True,
                        help_text="include a pair of curly braces {} where you want the year inserted",
                        verbose_name="custom copyright notice",
                    ),
                ),
                (
                    "custom_icon",
                    models.CharField(
                        blank=True,
                        help_text="<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>",
                        max_length=50,
                        verbose_name="custom icon",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en_US", max_length=10, verbose_name="locale"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        default="article",
                        help_text="Open Graph type, see https://ogp.me",
                        max_length=50,
                        verbose_name="type",
                    ),
                ),
                (
                    "attachment_set",
                    models.ManyToManyField(
                        to="genericsite.attachment", verbose_name="attachment set"
                    ),
                ),
                (
                    "image_set",
                    models.ManyToManyField(
                        to="genericsite.image", verbose_name="image set"
                    ),
                ),
                (
                    "og_image",
                    models.ForeignKey(
                        blank=True,
                        help_text="Image for social sharing",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="genericsite.image",
                    ),
                ),
                (
                    "section",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="genericsite.section",
                        verbose_name="section",
                    ),
                ),
                (
                    "site",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="sites.site",
                        verbose_name="site",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "article",
                "verbose_name_plural": "articles",
                "ordering": ["-published_time"],
                "get_latest_by": "published_time",
                "unique_together": {("site", "section", "slug")},
            },
        ),
    ]
