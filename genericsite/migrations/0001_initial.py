# Generated by Django 4.0.5 on 2022-08-16 15:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import filer.fields.image
import genericsite.models
import taggit.managers
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        ('filer', '0015_alter_file_owner_alter_file_polymorphic_ctype_and_more'),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='AudioFile',
            fields=[
                ('file_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='filer.file')),
                ('published_time', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='published time')),
                ('custom_copyright_notice', tinymce.models.HTMLField(blank=True, help_text='include a pair of curly braces {} where you want the year inserted', verbose_name='custom copyright notice')),
                ('duration', models.FloatField(blank=True, help_text='length in seconds', null=True, verbose_name='duration')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('filer.file',),
        ),
        migrations.CreateModel(
            name='ImageFile',
            fields=[
                ('_height', models.FloatField(blank=True, null=True)),
                ('_width', models.FloatField(blank=True, null=True)),
                ('default_alt_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='default alt text')),
                ('default_caption', models.CharField(blank=True, max_length=255, null=True, verbose_name='default caption')),
                ('subject_location', models.CharField(blank=True, default='', max_length=64, verbose_name='subject location')),
                ('file_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='%(app_label)s_%(class)s_file', serialize=False, to='filer.file')),
                ('date_taken', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='date taken')),
                ('custom_copyright_notice', tinymce.models.HTMLField(blank=True, help_text='include a pair of curly braces {} where you want the year inserted', verbose_name='custom copyright notice')),
            ],
            options={
                'verbose_name': 'image',
                'verbose_name_plural': 'images',
                'abstract': False,
                'default_manager_name': 'objects',
            },
            bases=('filer.file',),
        ),
        migrations.CreateModel(
            name='VideoFile',
            fields=[
                ('file_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='filer.file')),
                ('published_time', models.DateTimeField(blank=True, db_index=True, help_text="Must be non-blank and in the past for page to be 'live'", null=True, verbose_name='published time')),
                ('custom_copyright_notice', tinymce.models.HTMLField(blank=True, help_text='include a pair of curly braces {} where you want the year inserted', verbose_name='custom copyright notice')),
                ('duration', models.FloatField(blank=True, help_text='length in seconds', null=True, verbose_name='duration')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('filer.file',),
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('status', models.CharField(choices=[('withheld', 'Draft (withheld)'), ('usable', 'Publish (usable)'), ('cancelled', 'Unpublish (cancelled)')], db_index=True, default='usable', max_length=50, verbose_name='status')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('base_template', models.CharField(blank=True, max_length=255, verbose_name='base template')),
                ('content_template', models.CharField(blank=True, max_length=255, verbose_name='content body template')),
                ('body', tinymce.models.HTMLField(blank=True, verbose_name='body content')),
                ('published_time', models.DateTimeField(blank=True, db_index=True, help_text="Must be non-blank and in the past for page to be 'live'", null=True, verbose_name='published time')),
                ('modified_time', models.DateTimeField(blank=True, db_index=True, help_text='Time of last significant editorial update', null=True, verbose_name='modified time')),
                ('expiration_time', models.DateTimeField(blank=True, db_index=True, help_text="Must be blank or in the future for page to be 'live'", null=True, verbose_name='expiration time')),
                ('author_display_name', models.CharField(blank=True, help_text="e.g. 'Dr. Samuel Clemens, Phd.'", max_length=255, verbose_name='author name, as displayed')),
                ('author_profile_url', models.URLField(blank=True, max_length=255, verbose_name='author URL')),
                ('type', models.CharField(default='website', help_text='Open Graph type, see https://ogp.me', max_length=50, verbose_name='opengraph type')),
                ('seo_title', models.CharField(blank=True, max_length=255, verbose_name='SEO title override')),
                ('seo_description', models.CharField(blank=True, max_length=255, verbose_name='SEO description override')),
                ('custom_copyright_notice', tinymce.models.HTMLField(blank=True, help_text='include a pair of curly braces {} where you want the year inserted', verbose_name='custom copyright notice')),
                ('custom_icon', models.CharField(blank=True, help_text='<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>', max_length=50, verbose_name='custom icon')),
                ('locale', models.CharField(default='en_US', max_length=10, verbose_name='locale')),
                ('og_image', filer.fields.image.FilerImageField(blank=True, help_text='Image for social sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.FILER_IMAGE_MODEL)),
                ('site', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='sites.site', verbose_name='site')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'section',
                'verbose_name_plural': 'sections',
                'ordering': ['-published_time'],
                'get_latest_by': 'published_time',
                'abstract': False,
                'unique_together': {('site', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_name', models.CharField(max_length=255, verbose_name='admin name')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='title')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sites.site', verbose_name='site')),
            ],
            options={
                'unique_together': {('site', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('status', models.CharField(choices=[('withheld', 'Draft (withheld)'), ('usable', 'Publish (usable)'), ('cancelled', 'Unpublish (cancelled)')], db_index=True, default='usable', max_length=50, verbose_name='status')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('base_template', models.CharField(blank=True, max_length=255, verbose_name='base template')),
                ('content_template', models.CharField(blank=True, max_length=255, verbose_name='content body template')),
                ('body', tinymce.models.HTMLField(blank=True, verbose_name='body content')),
                ('published_time', models.DateTimeField(blank=True, db_index=True, help_text="Must be non-blank and in the past for page to be 'live'", null=True, verbose_name='published time')),
                ('modified_time', models.DateTimeField(blank=True, db_index=True, help_text='Time of last significant editorial update', null=True, verbose_name='modified time')),
                ('expiration_time', models.DateTimeField(blank=True, db_index=True, help_text="Must be blank or in the future for page to be 'live'", null=True, verbose_name='expiration time')),
                ('author_display_name', models.CharField(blank=True, help_text="e.g. 'Dr. Samuel Clemens, Phd.'", max_length=255, verbose_name='author name, as displayed')),
                ('author_profile_url', models.URLField(blank=True, max_length=255, verbose_name='author URL')),
                ('type', models.CharField(default='website', help_text='Open Graph type, see https://ogp.me', max_length=50, verbose_name='opengraph type')),
                ('seo_title', models.CharField(blank=True, max_length=255, verbose_name='SEO title override')),
                ('seo_description', models.CharField(blank=True, max_length=255, verbose_name='SEO description override')),
                ('custom_copyright_notice', tinymce.models.HTMLField(blank=True, help_text='include a pair of curly braces {} where you want the year inserted', verbose_name='custom copyright notice')),
                ('custom_icon', models.CharField(blank=True, help_text='<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>', max_length=50, verbose_name='custom icon')),
                ('locale', models.CharField(default='en_US', max_length=10, verbose_name='locale')),
                ('admin_name', models.CharField(help_text='Name used in the admin to distinguish from other home pages', max_length=255, unique=True, verbose_name='admin name')),
                ('og_image', filer.fields.image.FilerImageField(blank=True, help_text='Image for social sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.FILER_IMAGE_MODEL)),
                ('site', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='sites.site', verbose_name='site')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'home page',
                'verbose_name_plural': 'home pages',
                'ordering': ['-published_time'],
                'get_latest_by': 'published_time',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('status', models.CharField(choices=[('withheld', 'Draft (withheld)'), ('usable', 'Publish (usable)'), ('cancelled', 'Unpublish (cancelled)')], db_index=True, default='usable', max_length=50, verbose_name='status')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('base_template', models.CharField(blank=True, max_length=255, verbose_name='base template')),
                ('content_template', models.CharField(blank=True, max_length=255, verbose_name='content body template')),
                ('body', tinymce.models.HTMLField(blank=True, verbose_name='body content')),
                ('published_time', models.DateTimeField(blank=True, db_index=True, help_text="Must be non-blank and in the past for page to be 'live'", null=True, verbose_name='published time')),
                ('modified_time', models.DateTimeField(blank=True, db_index=True, help_text='Time of last significant editorial update', null=True, verbose_name='modified time')),
                ('expiration_time', models.DateTimeField(blank=True, db_index=True, help_text="Must be blank or in the future for page to be 'live'", null=True, verbose_name='expiration time')),
                ('author_display_name', models.CharField(blank=True, help_text="e.g. 'Dr. Samuel Clemens, Phd.'", max_length=255, verbose_name='author name, as displayed')),
                ('author_profile_url', models.URLField(blank=True, max_length=255, verbose_name='author URL')),
                ('seo_title', models.CharField(blank=True, max_length=255, verbose_name='SEO title override')),
                ('seo_description', models.CharField(blank=True, max_length=255, verbose_name='SEO description override')),
                ('custom_copyright_notice', tinymce.models.HTMLField(blank=True, help_text='include a pair of curly braces {} where you want the year inserted', verbose_name='custom copyright notice')),
                ('custom_icon', models.CharField(blank=True, help_text='<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>', max_length=50, verbose_name='custom icon')),
                ('locale', models.CharField(default='en_US', max_length=10, verbose_name='locale')),
                ('type', models.CharField(default='article', help_text='Open Graph type, see https://ogp.me', max_length=50, verbose_name='type')),
                ('og_image', filer.fields.image.FilerImageField(blank=True, help_text='Image for social sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.FILER_IMAGE_MODEL)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='genericsite.section', verbose_name='section')),
                ('site', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='sites.site', verbose_name='site')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'article',
                'verbose_name_plural': 'articles',
                'ordering': ['-published_time'],
                'get_latest_by': 'published_time',
                'unique_together': {('site', 'section', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='SiteVar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('value', models.TextField(verbose_name='value')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vars', to='sites.site', verbose_name='site')),
            ],
            options={
                'verbose_name': 'sitevar',
                'verbose_name_plural': 'sitevars',
                'base_manager_name': 'objects',
                'unique_together': {('site', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('status', models.CharField(choices=[('withheld', 'Draft (withheld)'), ('usable', 'Publish (usable)'), ('cancelled', 'Unpublish (cancelled)')], db_index=True, default='usable', max_length=50, verbose_name='status')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('base_template', models.CharField(blank=True, max_length=255, verbose_name='base template')),
                ('content_template', models.CharField(blank=True, max_length=255, verbose_name='content body template')),
                ('body', tinymce.models.HTMLField(blank=True, verbose_name='body content')),
                ('published_time', models.DateTimeField(blank=True, db_index=True, help_text="Must be non-blank and in the past for page to be 'live'", null=True, verbose_name='published time')),
                ('modified_time', models.DateTimeField(blank=True, db_index=True, help_text='Time of last significant editorial update', null=True, verbose_name='modified time')),
                ('expiration_time', models.DateTimeField(blank=True, db_index=True, help_text="Must be blank or in the future for page to be 'live'", null=True, verbose_name='expiration time')),
                ('author_display_name', models.CharField(blank=True, help_text="e.g. 'Dr. Samuel Clemens, Phd.'", max_length=255, verbose_name='author name, as displayed')),
                ('author_profile_url', models.URLField(blank=True, max_length=255, verbose_name='author URL')),
                ('type', models.CharField(default='website', help_text='Open Graph type, see https://ogp.me', max_length=50, verbose_name='opengraph type')),
                ('seo_title', models.CharField(blank=True, max_length=255, verbose_name='SEO title override')),
                ('seo_description', models.CharField(blank=True, max_length=255, verbose_name='SEO description override')),
                ('custom_copyright_notice', tinymce.models.HTMLField(blank=True, help_text='include a pair of curly braces {} where you want the year inserted', verbose_name='custom copyright notice')),
                ('custom_icon', models.CharField(blank=True, help_text='<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>', max_length=50, verbose_name='custom icon')),
                ('locale', models.CharField(default='en_US', max_length=10, verbose_name='locale')),
                ('og_image', filer.fields.image.FilerImageField(blank=True, help_text='Image for social sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.FILER_IMAGE_MODEL)),
                ('site', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='sites.site', verbose_name='site')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'page',
                'verbose_name_plural': 'pages',
                'ordering': ['-published_time'],
                'get_latest_by': 'published_time',
                'abstract': False,
                'unique_together': {('site', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(help_text='This can be either an absolute path or a full URL starting with a scheme such as “https://”.', max_length=255, verbose_name='URL')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='title')),
                ('custom_icon', models.CharField(blank=True, help_text='<a href=https://icons.getbootstrap.com/#icons target=iconlist>icon list</a>', max_length=50, verbose_name='custom icon')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='genericsite.menu', verbose_name='menu')),
                ('og_image', filer.fields.image.FilerImageField(blank=True, help_text='Image for social sharing', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.FILER_IMAGE_MODEL)),
            ],
            options={
                'unique_together': {('menu', 'title'), ('menu', 'url')},
            },
        ),
        migrations.CreateModel(
            name='ArticleVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contextual_title', models.CharField(blank=True, max_length=255, verbose_name='title')),
                ('contextual_description', models.TextField(blank=True, verbose_name='description')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_set', to='genericsite.article', verbose_name='article')),
                ('video_file', genericsite.models.FilerVideoField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='genericsite.videofile', verbose_name='video file')),
            ],
            options={
                'order_with_respect_to': 'article',
            },
        ),
        migrations.CreateModel(
            name='ArticleImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contextual_title', models.CharField(blank=True, max_length=255, verbose_name='title')),
                ('contextual_alt_text', models.CharField(blank=True, max_length=255, verbose_name='alt text')),
                ('contextual_description', models.TextField(blank=True, verbose_name='description')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image_set', to='genericsite.article', verbose_name='article')),
                ('image_file', filer.fields.image.FilerImageField(help_text='Image for social sharing', on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.FILER_IMAGE_MODEL, verbose_name='image file')),
            ],
            options={
                'order_with_respect_to': 'article',
            },
        ),
        migrations.CreateModel(
            name='ArticleAudio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contextual_title', models.CharField(blank=True, max_length=255, verbose_name='title')),
                ('contextual_description', models.TextField(blank=True, verbose_name='description')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='audio_set', to='genericsite.article', verbose_name='article')),
                ('audio_file', genericsite.models.FilerAudioField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='genericsite.audiofile', verbose_name='audio file')),
            ],
            options={
                'order_with_respect_to': 'article',
            },
        ),
    ]
